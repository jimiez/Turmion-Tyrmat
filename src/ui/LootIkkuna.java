package ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import logiikka.Peli;
import logiikka.esineet.Esine;
import logiikka.hahmot.Hahmo;

/**
 * Kutsutaan kun hahmolta löytyy loottia
 */
public class LootIkkuna extends javax.swing.JDialog {

    private Peli peli;
    private DefaultListModel listModelLoot;
    private PaaNakyma paanakyma;
    private Hahmo hahmo;

    /**
     * Pistää esineet lootti-ikkunaan.
     */
    public synchronized void AlustaReppu() {

        ArrayList<Esine> lootit = this.hahmo.getLoot();

        for (Esine e : lootit) {
            listModelLoot.addElement(e);
        }
    }

    /**
     * Peruskonstruktori, ei tule käyttää, johtaa NullPointerExceptioniin
     */
    public LootIkkuna() {
        this.requestFocusInWindow();
        listModelLoot = new DefaultListModel();
        initComponents();
        getRootPane().setDefaultButton(poimiKaikkiNappi);

    }

    /**
     * Kuormitetussa konstruktorissa määritellään peli ja päänäkymä johon
     * lootti-ikkuna liittyy, sekä hahmo jonka lootteja tarkastellaan
     *
     * @param peli Peli-olio johon lootti-ikkuna liittyy
     * @param paanakyma Päänäkymä-olio johon lootti-ikkuna liittyy
     * @param hahmo Hahmo joka halutaan lootata
     */
    public LootIkkuna(Peli peli, PaaNakyma paanakyma, Hahmo hahmo) {

        listModelLoot = new DefaultListModel();
        this.hahmo = hahmo;
        this.peli = peli;
        this.paanakyma = paanakyma;

        initComponents();
        this.setTitle(hahmo.getNimi());
        getRootPane().setDefaultButton(poimiKaikkiNappi);

        lootList.addListSelectionListener(new ListSelectionListener() {

            @Override
            public synchronized void valueChanged(ListSelectionEvent e) {
                muutosListalla();
            }
        });

        // tuho

        poimiKaikkiNappi.addActionListener(
                new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        poimiKaikki();
                    }
                });

        // käyttö
        poimiNappi.addActionListener(
                new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        poimi();
                    }
                });

        loottiPaneeli.requestFocus();

    }

    /**
     * Pyytää focuksen ikkunalle
     */
    public void paivitaKaikki() {
        loottiPaneeli.requestFocus();
    }

    /**
     * Metodi jota kutsutaan kun listalla tapahtuu muutoksia
     *
     */
    public synchronized void muutosListalla() {
        int ind = lootList.getSelectedIndex();
        if (ind < 0) {
            return;
        }
        Esine valittu = ((Esine) listModelLoot.getElementAt(lootList.getSelectedIndex()));
        kuvausText.setText(valittu.tulostaTiedot());
        paivitaKaikki();
    }

    /**
     * Poimi-nappia painetaan. Sulkee ikkunaan jos lista menee tyhjäksi.
     *
     */
    public synchronized void poimi() {
        int ind = lootList.getSelectedIndex();

        if (ind >= 0) {
            Esine valittu = ((Esine) listModelLoot.getElementAt(ind));

            if (peli.getReppu().lisaa(valittu)) {
                listModelLoot.removeElementAt(ind);
                this.hahmo.getLoot().remove(valittu);
            }

            paanakyma.paivitaKaikki();
            if (listModelLoot.isEmpty()) {
                this.dispose();
            }
        }
    }

    /**
     * Nappi joka poimii kaiken reppuun, jos mahtuu.
     *
     */
    public synchronized void poimiKaikki() {

        double yhteisPaino = 0;
        for (Esine e : this.hahmo.getLoot()) {
            yhteisPaino += e.getPaino();
        }

        if (yhteisPaino + this.peli.getReppu().getKokonaisPaino() <= this.peli.getPelaaja().getMaksimipaino()) {
            for (Esine e : this.hahmo.getLoot()) {
                this.peli.getReppu().lisaa(e);
            }
            this.hahmo.getLoot().clear();
            this.dispose();
            this.paanakyma.paivitaKaikki();
        } else {
            this.peli.getLoki().kirjaa("Kaikki rojut eivät mahdu reppuun!");
            this.paanakyma.paivitaKaikki();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        poistuNappi = new javax.swing.JButton();
        loottiPaneeli = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lootList = new javax.swing.JList(listModelLoot);
        jScrollPane1 = new javax.swing.JScrollPane();
        kuvausText = new javax.swing.JTextArea();
        poimiNappi = new javax.swing.JButton();
        poimiKaikkiNappi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("");
        setAlwaysOnTop(true);

        poistuNappi.setText("Poistu (E)");
        poistuNappi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poistuNappiActionPerformed(evt);
            }
        });

        loottiPaneeli.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        loottiPaneeli.setVerifyInputWhenFocusTarget(false);
        loottiPaneeli.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                loottiPaneeliKeyPressed(evt);
            }
        });

        lootList.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lootList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lootList.setFocusable(false);
        lootList.setRequestFocusEnabled(false);
        lootList.setVerifyInputWhenFocusTarget(false);
        jScrollPane3.setViewportView(lootList);

        kuvausText.setColumns(20);
        kuvausText.setEditable(false);
        kuvausText.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        kuvausText.setLineWrap(true);
        kuvausText.setRows(5);
        kuvausText.setWrapStyleWord(true);
        jScrollPane1.setViewportView(kuvausText);

        javax.swing.GroupLayout loottiPaneeliLayout = new javax.swing.GroupLayout(loottiPaneeli);
        loottiPaneeli.setLayout(loottiPaneeliLayout);
        loottiPaneeliLayout.setHorizontalGroup(
            loottiPaneeliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        loottiPaneeliLayout.setVerticalGroup(
            loottiPaneeliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loottiPaneeliLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
        );

        poimiNappi.setText("Poimi");

        poimiKaikkiNappi.setText("Poimi kaikki (R)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loottiPaneeli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(poimiNappi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(poimiKaikkiNappi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(poistuNappi)))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(loottiPaneeli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(poistuNappi)
                    .addComponent(poimiNappi)
                    .addComponent(poimiKaikkiNappi))
                .addGap(0, 0, 0))
        );

        AlustaReppu();

        getAccessibleContext().setAccessibleName("Lootti");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void poistuNappiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poistuNappiActionPerformed
        paanakyma.paivitaKaikki();
        this.dispose();
    }//GEN-LAST:event_poistuNappiActionPerformed

    private void loottiPaneeliKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loottiPaneeliKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_R) {
            poimiKaikki();
        } else if (evt.getKeyCode() == KeyEvent.VK_E) {
            poistuNappiActionPerformed(null);
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            poistuNappiActionPerformed(null);
        }
    }//GEN-LAST:event_loottiPaneeliKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());


        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LootIkkuna.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LootIkkuna.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LootIkkuna.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LootIkkuna.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new LootIkkuna().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea kuvausText;
    private javax.swing.JList lootList;
    private javax.swing.JPanel loottiPaneeli;
    private javax.swing.JButton poimiKaikkiNappi;
    private javax.swing.JButton poimiNappi;
    private javax.swing.JButton poistuNappi;
    // End of variables declaration//GEN-END:variables
}
